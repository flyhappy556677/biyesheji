{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport HomeView from '../views/Manage.vue';\nimport store from \"@/store\";\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'login',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/Login.vue')\n}, {\n  path: '/register',\n  name: 'Register',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/Register.vue')\n}, {\n  path: '/404',\n  name: '404',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/404.vue')\n}, {\n  path: '/front',\n  name: 'Front',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/front/Front.vue'),\n  children: [{\n    path: 'home',\n    name: 'FrontHome',\n    component: () => import( /* webpackChunkName: \"about\" */'../views/front/Home.vue')\n  }, {\n    path: 'item',\n    name: 'item',\n    component: () => import( /* webpackChunkName: \"about\" */'../views/front/item.vue')\n  }]\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\n//提供一个重置路由的方法\nexport const resetRouter = () => {\n  router.matcher = new VueRouter({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes\n  });\n};\n//刷新页面会重置路由\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n    //获取当前的路由对象名称数组\n    const currentRouteNames = router.getRoutes().map(v => v.name);\n    if (!currentRouteNames.includes('Manage')) {\n      //拼装动态路由\n      const manageRoute = {\n        path: '',\n        name: 'Manage',\n        component: () => import('../views/Manage.vue'),\n        redirect: \"/home\",\n        children: [{\n          path: 'person',\n          name: '个人信息',\n          component: () => import( /* webpackChunkName: \"about\" */'../views/Person.vue')\n        }]\n      };\n      const menus = JSON.parse(storeMenus);\n      menus.forEach(item => {\n        if (item.path) {\n          //当且仅当path不为空的时候才去设置路由\n          let itemMenu = {\n            path: item.path.replace(\"/\", \"\"),\n            name: item.name,\n            component: () => import('../views/' + item.pagePath + '.vue')\n          };\n          manageRoute.children.push(itemMenu);\n        } else if (item.children.length) {\n          item.children.forEach(item => {\n            if (item.path) {\n              let itemMenu = {\n                path: item.path.replace(\"/\", \"\"),\n                name: item.name,\n                component: () => import('../views/' + item.pagePath + '.vue')\n              };\n              manageRoute.children.push(itemMenu);\n            }\n          });\n        }\n      });\n      // 根据数据库中的信息动态生成详情页面的路由\n      // 假设数据库中存储了详情页面的信息，包括路径等\n      const detailPage = {\n        path: 'detail',\n        name: '详情页面',\n        component: () => import('../views/Detail.vue') // 假设详情页面的路径是 'Detail.vue'\n      };\n      // 根据数据库中的信息动态生成详情页面的路由\n      // 假设数据库中存储了详情页面的信息，包括路径等\n      const OperatedronePage = {\n        path: 'operatedrone',\n        name: '详情页面',\n        component: () => import('../views/Operatedrone.vue') // 假设详情页面的路径是 'Detail.vue'\n      };\n      const addMaintenance = {\n        path: 'addMaintenance',\n        name: '保养清单',\n        component: () => import('../views/addMaintenance.vue') // 假设详情页面的路径是 'Detail.vue'\n      };\n      manageRoute.children.push(detailPage);\n      manageRoute.children.push(OperatedronePage);\n      manageRoute.children.push(addMaintenance);\n      //动态添加到现在的路由对象中\n      router.addRoute(manageRoute);\n    }\n  }\n};\n//动态添加到现在的路由对象中\nsetRoutes();\nrouter.beforeEach((to, from, next) => {\n  localStorage.setItem(\"currentPathName\", to.name); //设置当前路由名称,为了在Header组件使用\n  store.commit(\"setPath\"); //触发store的数据更新\n\n  //未找到路由情况\n  if (!to.matched.length) {\n    const storeMenus = localStorage.getItem(\"menus\");\n    if (storeMenus) {\n      next(\"/404\"); //放行路由\n    } else {\n      next(\"/login\");\n    }\n  }\n  //其他的情况都放行\n  next();\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","HomeView","store","use","routes","path","name","component","children","router","mode","base","process","env","BASE_URL","resetRouter","matcher","setRoutes","storeMenus","localStorage","getItem","currentRouteNames","getRoutes","map","v","includes","manageRoute","redirect","menus","JSON","parse","forEach","item","itemMenu","replace","pagePath","push","length","detailPage","OperatedronePage","addMaintenance","addRoute","beforeEach","to","from","next","setItem","commit","matched"],"sources":["D:/Code/biyesheji/drone-manager/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport HomeView from '../views/Manage.vue'\nimport store from \"@/store\";\n\nVue.use(VueRouter)\n\nconst routes = [\n\n  {\n    path: '/login',\n    name: 'login',\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/Login.vue')\n    },\n    {\n      path: '/register',\n      name: 'Register',\n      component: () => import(/* webpackChunkName: \"about\" */ '../views/Register.vue')\n    },\n    {\n      path: '/404',\n      name: '404',\n      component: () => import(/* webpackChunkName: \"about\" */ '../views/404.vue')\n    },\n    {\n      path: '/front',\n      name: 'Front',\n      component: () => import(/* webpackChunkName: \"about\" */ '../views/front/Front.vue'),\n      children:[\n          {\n            path: 'home',\n            name: 'FrontHome',\n            component: () => import(/* webpackChunkName: \"about\" */ '../views/front/Home.vue')\n          },\n          {\n            path: 'item',\n            name: 'item',\n            component: () => import(/* webpackChunkName: \"about\" */ '../views/front/item.vue')\n          },\n      ]\n    },\n]\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n\n//提供一个重置路由的方法\nexport const resetRouter=() =>{\n  router.matcher =new VueRouter({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes\n  })\n}\n//刷新页面会重置路由\nexport  const setRoutes=() =>{\n  const storeMenus=localStorage.getItem(\"menus\");\n  if(storeMenus){\n    //获取当前的路由对象名称数组\n    const currentRouteNames =router.getRoutes().map(v =>v.name)\n    if(!currentRouteNames.includes('Manage')){\n      //拼装动态路由\n      const manageRoute=\n          {path: '',name:'Manage', component: () => import( '../views/Manage.vue'), redirect:\"/home\",children:[\n          {path: 'person', name: '个人信息', component: () => import(/* webpackChunkName: \"about\" */ '../views/Person.vue')}]}\n      const menus=JSON.parse(storeMenus)\n      menus.forEach(item =>{\n        if(item.path){//当且仅当path不为空的时候才去设置路由\n          let itemMenu={path: item.path.replace(\"/\",\"\"),name:item.name,component:() => import('../views/'+item.pagePath +'.vue')}\n          manageRoute.children.push(itemMenu)\n        }else if (item.children.length){\n          item.children.forEach(item =>{\n            if(item.path){\n              let itemMenu={path: item.path.replace(\"/\",\"\"),name:item.name,component:() => import('../views/'+item.pagePath +'.vue')}\n              manageRoute.children.push(itemMenu)}\n          })\n        }\n\n      })\n      // 根据数据库中的信息动态生成详情页面的路由\n      // 假设数据库中存储了详情页面的信息，包括路径等\n      const detailPage = {\n        path: 'detail',\n        name: '详情页面',\n        component: () => import('../views/Detail.vue') // 假设详情页面的路径是 'Detail.vue'\n      };\n      // 根据数据库中的信息动态生成详情页面的路由\n      // 假设数据库中存储了详情页面的信息，包括路径等\n      const OperatedronePage = {\n        path: 'operatedrone',\n        name: '详情页面',\n        component: () => import('../views/Operatedrone.vue') // 假设详情页面的路径是 'Detail.vue'\n      };\n      const addMaintenance = {\n        path: 'addMaintenance',\n        name: '保养清单',\n        component: () => import('../views/addMaintenance.vue') // 假设详情页面的路径是 'Detail.vue'\n      };\n      manageRoute.children.push(detailPage);\n      manageRoute.children.push(OperatedronePage);\n      manageRoute.children.push(addMaintenance);\n      //动态添加到现在的路由对象中\n      router.addRoute(manageRoute)\n    }\n  }\n}\n//动态添加到现在的路由对象中\nsetRoutes()\n\nrouter.beforeEach((to, from, next) =>{\n  localStorage.setItem(\"currentPathName\",to.name) //设置当前路由名称,为了在Header组件使用\n  store.commit(\"setPath\") //触发store的数据更新\n\n  //未找到路由情况\n  if (!to.matched.length){\n    const storeMenus=localStorage.getItem(\"menus\")\n    if(storeMenus){\n      next(\"/404\") //放行路由\n    }else {\n      next(\"/login\")\n    }\n  }\n  //其他的情况都放行\n  next()\n\n\n})\n\nexport default router\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}